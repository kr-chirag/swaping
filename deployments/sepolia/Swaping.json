{
  "address": "0xd95aa546e9745CDF7c5CC3f8ce6F719173e048c6",
  "abi": [
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapEURCForUSDC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapExactETHForTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapUSDForETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swapUSDForEURC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34a0dff1cd0138575b7e6c13270574fc9c315e208f8f82ef3c67f89d8c906527",
  "receipt": {
    "to": null,
    "from": "0xB6C4d3ea2DB8c0f9FA49ab762Ff685a5D63723C8",
    "contractAddress": "0xd95aa546e9745CDF7c5CC3f8ce6F719173e048c6",
    "transactionIndex": 132,
    "gasUsed": "1267154",
    "logsBloom": "0x
    "blockHash": "0x8c2e1109638224380188f50f68f46dfe50a720dd8896a6649bd9c9813d32fec8",
    "transactionHash": "0x34a0dff1cd0138575b7e6c13270574fc9c315e208f8f82ef3c67f89d8c906527",
    "logs": [],
    "blockNumber": 8115128,
    "cumulativeGasUsed": "9730460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c5ec992cf6ef0d9726825907d198b974",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapEURCForUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapUSDForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapUSDForEURC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Swaping.sol\":\"Swaping\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/Swaping.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract Swaping {\\n    IUniswapV2Router02 public router =\\n        IUniswapV2Router02(0xeE567Fe1712Faf6149d80dA1E6934E354124CfE3);\\n    address WETH = router.WETH();\\n    address USDC = 0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238;\\n    address EURC = 0x08210F9170F89Ab7658F0B5E3fF39b0E03C594D4;\\n\\n    address[] pathWthToUSDC = [WETH, USDC];\\n    address[] pathUSDCToETH = [USDC, WETH];\\n    address[] pathEURCToUSDC = [EURC, USDC];\\n    address[] pathUSDCToEURC = [USDC, EURC];\\n\\n    function swapExactETHForTokens() public payable {\\n        router.swapExactETHForTokens{value: msg.value}(\\n            0,\\n            pathWthToUSDC,\\n            msg.sender,\\n            block.timestamp + 300\\n        );\\n    }\\n\\n    function swapEURCForUSDC(uint256 amount) public {\\n        IERC20(EURC).transferFrom(msg.sender, address(this), amount);\\n        IERC20(EURC).approve(address(router), amount);\\n        router.swapExactTokensForTokens(\\n            amount,\\n            0,\\n            pathEURCToUSDC,\\n            msg.sender,\\n            block.timestamp + 300\\n        );\\n    }\\n\\n    function swapUSDForEURC(uint256 amount) public {\\n        IERC20(USDC).transferFrom(msg.sender, address(this), amount);\\n        IERC20(USDC).approve(address(router), amount);\\n        router.swapExactTokensForTokens(\\n            amount,\\n            0,\\n            pathUSDCToEURC,\\n            msg.sender,\\n            block.timestamp + 300\\n        );\\n    }\\n\\n    function swapUSDForETH(uint256 amount) public {\\n        IERC20(USDC).transferFrom(msg.sender, address(this), amount);\\n        IERC20(USDC).approve(address(router), amount);\\n        router.swapExactTokensForETH(\\n            amount,\\n            0,\\n            pathUSDCToETH,\\n            msg.sender,\\n            block.timestamp + 300\\n        );\\n    }\\n\\n    function withdraw() public {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x4125826849c46d01abb8fd5631c19e138f0897585ecdffdd9b6020ad7e6261dd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100555760003560e01c80630d7e7f231461005a5780633ccfd60b1461008357806351f839ac1461009a578063da455f01146100c3578063f281cc14146100ec578063f887ea40146100f6575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c91906108f2565b610121565b005b34801561008f57600080fd5b50610098610341565b005b3480156100a657600080fd5b506100c160048036038101906100bc91906108f2565b61038a565b005b3480156100cf57600080fd5b506100ea60048036038101906100e591906108f2565b6105aa565b005b6100f46107ca565b005b34801561010257600080fd5b5061010b610884565b604051610118919061099e565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610180939291906109e9565b6020604051808303816000875af115801561019f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101c39190610a58565b50600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610241929190610a85565b6020604051808303816000875af1158015610260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102849190610a58565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173982600060063361012c426102d59190610add565b6040518663ffffffff1660e01b81526004016102f5959493929190610c70565b6000604051808303816000875af1158015610314573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061033d9190610e38565b5050565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610387573d6000803e3d6000fd5b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016103e9939291906109e9565b6020604051808303816000875af1158015610408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042c9190610a58565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016104aa929190610a85565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed9190610a58565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173982600060073361012c4261053e9190610add565b6040518663ffffffff1660e01b815260040161055e959493929190610c70565b6000604051808303816000875af115801561057d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105a69190610e38565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610609939291906109e9565b6020604051808303816000875af1158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190610a58565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b360008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016106ca929190610a85565b6020604051808303816000875af11580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190610a58565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe582600060053361012c4261075e9190610add565b6040518663ffffffff1660e01b815260040161077e959493929190610c70565b6000604051808303816000875af115801561079d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107c69190610e38565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab534600060043361012c4261081a9190610add565b6040518663ffffffff1660e01b81526004016108399493929190610e81565b60006040518083038185885af1158015610857573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f820116820180604052508101906108819190610e38565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108cf816108bc565b81146108da57600080fd5b50565b6000813590506108ec816108c6565b92915050565b600060208284031215610908576109076108b2565b5b6000610916848285016108dd565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061096461095f61095a8461091f565b61093f565b61091f565b9050919050565b600061097682610949565b9050919050565b60006109888261096b565b9050919050565b6109988161097d565b82525050565b60006020820190506109b3600083018461098f565b92915050565b60006109c48261091f565b9050919050565b6109d4816109b9565b82525050565b6109e3816108bc565b82525050565b60006060820190506109fe60008301866109cb565b610a0b60208301856109cb565b610a1860408301846109da565b949350505050565b60008115159050919050565b610a3581610a20565b8114610a4057600080fd5b50565b600081519050610a5281610a2c565b92915050565b600060208284031215610a6e57610a6d6108b2565b5b6000610a7c84828501610a43565b91505092915050565b6000604082019050610a9a60008301856109cb565b610aa760208301846109da565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ae8826108bc565b9150610af3836108bc565b9250828201905080821115610b0b57610b0a610aae565b5b92915050565b6000819050919050565b6000610b36610b31610b2c84610b11565b61093f565b6108bc565b9050919050565b610b4681610b1b565b82525050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b610b86816109b9565b82525050565b6000610b988383610b7d565b60208301905092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610be4610bdf83610ba4565b610bb1565b9050919050565b6000610bf78254610bd1565b9050919050565b6000600182019050919050565b6000610c1682610b4c565b610c208185610b57565b9350610c2b83610b68565b8060005b83811015610c6357610c4082610beb565b610c4a8882610b8c565b9750610c5583610bfe565b925050600181019050610c2f565b5085935050505092915050565b600060a082019050610c8560008301886109da565b610c926020830187610b3d565b8181036040830152610ca48186610c0b565b9050610cb360608301856109cb565b610cc060808301846109da565b9695505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d1882610ccf565b810181811067ffffffffffffffff82111715610d3757610d36610ce0565b5b80604052505050565b6000610d4a6108a8565b9050610d568282610d0f565b919050565b600067ffffffffffffffff821115610d7657610d75610ce0565b5b602082029050602081019050919050565b600080fd5b600081519050610d9b816108c6565b92915050565b6000610db4610daf84610d5b565b610d40565b90508083825260208201905060208402830185811115610dd757610dd6610d87565b5b835b81811015610e005780610dec8882610d8c565b845260208401935050602081019050610dd9565b5050509392505050565b600082601f830112610e1f57610e1e610cca565b5b8151610e2f848260208601610da1565b91505092915050565b600060208284031215610e4e57610e4d6108b2565b5b600082015167ffffffffffffffff811115610e6c57610e6b6108b7565b5b610e7884828501610e0a565b91505092915050565b6000608082019050610e966000830187610b3d565b8181036020830152610ea88186610c0b565b9050610eb760408301856109cb565b610ec460608301846109da565b9594505050505056fea26469706673582212200d9acb2bf2363262a7c7d1eddcf07e18be9b4f627c58a74cbbb44cdcea8145ef64736f6c634300081c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1763,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "router",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IUniswapV2Router02)1268"
      },
      {
        "astId": 1768,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "WETH",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1771,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "USDC",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1774,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "EURC",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1780,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "pathWthToUSDC",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1786,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "pathUSDCToETH",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1792,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "pathEURCToUSDC",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1798,
        "contract": "contracts/Swaping.sol:Swaping",
        "label": "pathUSDCToEURC",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)1268": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      }
    }
  }
}