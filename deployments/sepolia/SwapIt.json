{
  "address": "0xC87a09D3DB51822b7F2C3B5cf01E9E89e47197eF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "feeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalances",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "balances",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeRate",
          "type": "uint256"
        }
      ],
      "name": "setFeeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        }
      ],
      "name": "setRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5bd92a1bfce15e95e5603b07c4a1acbd213e4002ac67d169feb0e5d73b64528",
  "receipt": {
    "to": null,
    "from": "0xB6C4d3ea2DB8c0f9FA49ab762Ff685a5D63723C8",
    "contractAddress": "0xC87a09D3DB51822b7F2C3B5cf01E9E89e47197eF",
    "transactionIndex": 169,
    "gasUsed": "1756501",
    "logsBloom": "0x
    "blockHash": "0x056448523ab7fe07e2eeb8383a1e7019dde4282f8321a7652a0cccc70941046b",
    "transactionHash": "0xf5bd92a1bfce15e95e5603b07c4a1acbd213e4002ac67d169feb0e5d73b64528",
    "logs": [
      {
        "transactionIndex": 169,
        "blockNumber": 8115133,
        "transactionHash": "0xf5bd92a1bfce15e95e5603b07c4a1acbd213e4002ac67d169feb0e5d73b64528",
        "address": "0xC87a09D3DB51822b7F2C3B5cf01E9E89e47197eF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b6c4d3ea2db8c0f9fa49ab762ff685a5d63723c8"
        ],
        "data": "0x",
        "logIndex": 216,
        "blockHash": "0x056448523ab7fe07e2eeb8383a1e7019dde4282f8321a7652a0cccc70941046b"
      }
    ],
    "blockNumber": 8115133,
    "cumulativeGasUsed": "16232327",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xeE567Fe1712Faf6149d80dA1E6934E354124CfE3"
  ],
  "numDeployments": 1,
  "solcInputHash": "c5ec992cf6ef0d9726825907d198b974",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeRate\",\"type\":\"uint256\"}],\"name\":\"setFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapIt.sol\":\"SwapIt\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9b161e97b8967d4bc0c08d25741889a30692cdda4b71910bf1b0e315f1962212\",\"license\":\"MIT\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/SwapIt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract SwapIt is Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    IUniswapV2Router02 private router;\\n    EnumerableSet.AddressSet private tokens;\\n\\n    uint256 public feeRate = 950;\\n\\n    constructor(address _uniswapV2Router) Ownable(msg.sender) {\\n        router = IUniswapV2Router02(_uniswapV2Router);\\n    }\\n\\n    function setRouter(address _uniswapV2Router) public onlyOwner {\\n        router = IUniswapV2Router02(_uniswapV2Router);\\n    }\\n\\n    function setFeeRate(uint256 _feeRate) public onlyOwner {\\n        require(_feeRate > 0 && _feeRate < 1000, \\\"INVALID FEE RATE\\\");\\n        feeRate = _feeRate;\\n    }\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"INSUFFICIENT AMOUNT\\\");\\n        require(reserveA > 0 && reserveB > 0, \\\"INSUFFICIENT LIQUIDITY\\\");\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory path\\n    ) public view returns (uint256) {\\n        uint256 amountIn2 = (amountIn * feeRate) / 1000;\\n        uint256[] memory amounts = router.getAmountsOut(amountIn2, path);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] memory path\\n    ) public view returns (uint256) {\\n        uint256[] memory amounts = router.getAmountsIn(amountOut, path);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        tokens.add(path[0]);\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\n        uint256 amountIn2 = (amountIn * feeRate) / 1000;\\n        IERC20(path[0]).approve(address(router), amountIn2);\\n        router.swapExactTokensForTokens(\\n            amountIn2,\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external {\\n        tokens.add(path[0]);\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\n        uint256 amountIn2 = (amountIn * feeRate) / 1000;\\n        IERC20(path[0]).approve(address(router), amountIn2);\\n        router.swapExactTokensForETH(\\n            amountIn2,\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable {\\n        uint256 eth = (msg.value * feeRate) / 1000;\\n        router.swapExactETHForTokens{value: eth}(\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n\\n    function withdrawAll() public onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n        for (uint256 i; i < tokens.length(); i++) {\\n            IERC20 token = IERC20(tokens.at(i));\\n            token.transfer(owner(), token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function getBalances()\\n        public\\n        view\\n        returns (address[] memory tokenAddresses, uint256[] memory balances)\\n    {\\n        uint256 len = tokens.length();\\n        tokenAddresses = new address[](len);\\n        balances = new uint256[](len);\\n        for (uint256 i; i < len; i++) {\\n            IERC20 token = IERC20(tokens.at(i));\\n            tokenAddresses[i] = address(token);\\n            balances[i] = token.balanceOf(address(this));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15a021463643f18395d11924c2304c692bbb040baf2026c982d1b4d7081981d3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526103b660045534801561001657600080fd5b5060405161200138038061200183398181016040528101906100389190610229565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100ab5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100a29190610265565b60405180910390fd5b6100ba8161010260201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610280565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101f6826101cb565b9050919050565b610206816101eb565b811461021157600080fd5b50565b600081519050610223816101fd565b92915050565b60006020828403121561023f5761023e6101c6565b5b600061024d84828501610214565b91505092915050565b61025f816101eb565b82525050565b600060208201905061027a6000830184610256565b92915050565b611d728061028f6000396000f3fe6080604052600436106100c15760003560e01c80637ff36ab51161007f578063978bbdb911610059578063978bbdb91461021f578063c0d786551461024a578063d06ca61f14610273578063f2fde38b146102b0576100c1565b80637ff36ab5146101c1578063853828b6146101dd5780638da5cb5b146101f4576100c1565b8062113e08146100c657806318cbafe5146100f25780631f00ca741461011b57806338ed17391461015857806345596e2e14610181578063715018a6146101aa575b600080fd5b3480156100d257600080fd5b506100db6102d9565b6040516100e9929190611390565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190611498565b61049e565b005b34801561012757600080fd5b50610142600480360381019061013d9190611681565b610723565b60405161014f91906116ec565b60405180910390f35b34801561016457600080fd5b5061017f600480360381019061017a9190611498565b6107fc565b005b34801561018d57600080fd5b506101a860048036038101906101a39190611707565b610a81565b005b3480156101b657600080fd5b506101bf610ae3565b005b6101db60048036038101906101d69190611734565b610af7565b005b3480156101e957600080fd5b506101f2610bcb565b005b34801561020057600080fd5b50610209610d5d565b60405161021691906117cb565b60405180910390f35b34801561022b57600080fd5b50610234610d86565b60405161024191906116ec565b60405180910390f35b34801561025657600080fd5b50610271600480360381019061026c91906117e6565b610d8c565b005b34801561027f57600080fd5b5061029a60048036038101906102959190611681565b610dd8565b6040516102a791906116ec565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d291906117e6565b610ed1565b005b60608060006102e86002610f57565b90508067ffffffffffffffff81111561030457610303611543565b5b6040519080825280602002602001820160405280156103325781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561034f5761034e611543565b5b60405190808252806020026020018201604052801561037d5781602001602082028036833780820191505090505b50915060005b818110156104985760006103a1826002610f6c90919063ffffffff16565b9050808583815181106103b7576103b6611813565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161042a91906117cb565b602060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190611857565b84838151811061047e5761047d611813565b5b602002602001018181525050508080600101915050610383565b50509091565b6104da848460008181106104b5576104b4611813565b5b90506020020160208101906104ca91906117e6565b6002610f8690919063ffffffff16565b50838360008181106104ef576104ee611813565b5b905060200201602081019061050491906117e6565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161054093929190611884565b6020604051808303816000875af115801561055f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058391906118f3565b5060006103e860045488610597919061194f565b6105a191906119c0565b9050848460008181106105b7576105b6611813565b5b90506020020160208101906105cc91906117e6565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016106289291906119f1565b6020604051808303816000875af1158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b91906118f3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe58288888888886040518763ffffffff1660e01b81526004016106d196959493929190611aa5565b6000604051808303816000875af11580156106f0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107199190611bc4565b5050505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7485856040518363ffffffff1660e01b8152600401610783929190611c0d565b600060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107c99190611bc4565b905080600182516107da9190611c3d565b815181106107eb576107ea611813565b5b602002602001015191505092915050565b6108388484600081811061081357610812611813565b5b905060200201602081019061082891906117e6565b6002610f8690919063ffffffff16565b508383600081811061084d5761084c611813565b5b905060200201602081019061086291906117e6565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161089e93929190611884565b6020604051808303816000875af11580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e191906118f3565b5060006103e8600454886108f5919061194f565b6108ff91906119c0565b90508484600081811061091557610914611813565b5b905060200201602081019061092a91906117e6565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109869291906119f1565b6020604051808303816000875af11580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906118f3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398288888888886040518763ffffffff1660e01b8152600401610a2f96959493929190611aa5565b6000604051808303816000875af1158015610a4e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a779190611bc4565b5050505050505050565b610a89610fb6565b600081118015610a9a57506103e881105b610ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad090611cce565b60405180910390fd5b8060048190555050565b610aeb610fb6565b610af5600061103d565b565b60006103e860045434610b0a919061194f565b610b1491906119c0565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab58288888888886040518763ffffffff1660e01b8152600401610b7a959493929190611cee565b60006040518083038185885af1158015610b98573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f82011682018060405250810190610bc29190611bc4565b50505050505050565b610bd3610fb6565b610bdb610d5d565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610c20573d6000803e3d6000fd5b5060005b610c2e6002610f57565b811015610d5a576000610c4b826002610f6c90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610c71610d5d565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610caa91906117cb565b602060405180830381865afa158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb9190611857565b6040518363ffffffff1660e01b8152600401610d089291906119f1565b6020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906118f3565b50508080600101915050610c24565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b610d94610fb6565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806103e860045485610dec919061194f565b610df691906119c0565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f83866040518363ffffffff1660e01b8152600401610e57929190611c0d565b600060405180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e9d9190611bc4565b90508060018251610eae9190611c3d565b81518110610ebf57610ebe611813565b5b60200260200101519250505092915050565b610ed9610fb6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f4b5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f4291906117cb565b60405180910390fd5b610f548161103d565b50565b6000610f6582600001611101565b9050919050565b6000610f7b8360000183611112565b60001c905092915050565b6000610fae836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61113d565b905092915050565b610fbe6111ad565b73ffffffffffffffffffffffffffffffffffffffff16610fdc610d5d565b73ffffffffffffffffffffffffffffffffffffffff161461103b57610fff6111ad565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161103291906117cb565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001805490509050919050565b600082600001828154811061112a57611129611813565b5b9060005260206000200154905092915050565b600061114983836111b5565b6111a25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506111a7565b600090505b92915050565b600033905090565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061122f82611204565b9050919050565b61123f81611224565b82525050565b60006112518383611236565b60208301905092915050565b6000602082019050919050565b6000611275826111d8565b61127f81856111e3565b935061128a836111f4565b8060005b838110156112bb5781516112a28882611245565b97506112ad8361125d565b92505060018101905061128e565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b611307816112f4565b82525050565b600061131983836112fe565b60208301905092915050565b6000602082019050919050565b600061133d826112c8565b61134781856112d3565b9350611352836112e4565b8060005b8381101561138357815161136a888261130d565b975061137583611325565b925050600181019050611356565b5085935050505092915050565b600060408201905081810360008301526113aa818561126a565b905081810360208301526113be8184611332565b90509392505050565b6000604051905090565b600080fd5b600080fd5b6113e4816112f4565b81146113ef57600080fd5b50565b600081359050611401816113db565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261142c5761142b611407565b5b8235905067ffffffffffffffff8111156114495761144861140c565b5b60208301915083602082028301111561146557611464611411565b5b9250929050565b61147581611224565b811461148057600080fd5b50565b6000813590506114928161146c565b92915050565b60008060008060008060a087890312156114b5576114b46113d1565b5b60006114c389828a016113f2565b96505060206114d489828a016113f2565b955050604087013567ffffffffffffffff8111156114f5576114f46113d6565b5b61150189828a01611416565b9450945050606061151489828a01611483565b925050608061152589828a016113f2565b9150509295509295509295565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61157b82611532565b810181811067ffffffffffffffff8211171561159a57611599611543565b5b80604052505050565b60006115ad6113c7565b90506115b98282611572565b919050565b600067ffffffffffffffff8211156115d9576115d8611543565b5b602082029050602081019050919050565b60006115fd6115f8846115be565b6115a3565b905080838252602082019050602084028301858111156116205761161f611411565b5b835b8181101561164957806116358882611483565b845260208401935050602081019050611622565b5050509392505050565b600082601f83011261166857611667611407565b5b81356116788482602086016115ea565b91505092915050565b60008060408385031215611698576116976113d1565b5b60006116a6858286016113f2565b925050602083013567ffffffffffffffff8111156116c7576116c66113d6565b5b6116d385828601611653565b9150509250929050565b6116e6816112f4565b82525050565b600060208201905061170160008301846116dd565b92915050565b60006020828403121561171d5761171c6113d1565b5b600061172b848285016113f2565b91505092915050565b6000806000806000608086880312156117505761174f6113d1565b5b600061175e888289016113f2565b955050602086013567ffffffffffffffff81111561177f5761177e6113d6565b5b61178b88828901611416565b9450945050604061179e88828901611483565b92505060606117af888289016113f2565b9150509295509295909350565b6117c581611224565b82525050565b60006020820190506117e060008301846117bc565b92915050565b6000602082840312156117fc576117fb6113d1565b5b600061180a84828501611483565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050611851816113db565b92915050565b60006020828403121561186d5761186c6113d1565b5b600061187b84828501611842565b91505092915050565b600060608201905061189960008301866117bc565b6118a660208301856117bc565b6118b360408301846116dd565b949350505050565b60008115159050919050565b6118d0816118bb565b81146118db57600080fd5b50565b6000815190506118ed816118c7565b92915050565b600060208284031215611909576119086113d1565b5b6000611917848285016118de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061195a826112f4565b9150611965836112f4565b9250828202611973816112f4565b9150828204841483151761198a57611989611920565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119cb826112f4565b91506119d6836112f4565b9250826119e6576119e5611991565b5b828204905092915050565b6000604082019050611a0660008301856117bc565b611a1360208301846116dd565b9392505050565b6000819050919050565b6000611a336020840184611483565b905092915050565b6000602082019050919050565b6000611a5483856111e3565b9350611a5f82611a1a565b8060005b85811015611a9857611a758284611a24565b611a7f8882611245565b9750611a8a83611a3b565b925050600181019050611a63565b5085925050509392505050565b600060a082019050611aba60008301896116dd565b611ac760208301886116dd565b8181036040830152611ada818688611a48565b9050611ae960608301856117bc565b611af660808301846116dd565b979650505050505050565b600067ffffffffffffffff821115611b1c57611b1b611543565b5b602082029050602081019050919050565b6000611b40611b3b84611b01565b6115a3565b90508083825260208201905060208402830185811115611b6357611b62611411565b5b835b81811015611b8c5780611b788882611842565b845260208401935050602081019050611b65565b5050509392505050565b600082601f830112611bab57611baa611407565b5b8151611bbb848260208601611b2d565b91505092915050565b600060208284031215611bda57611bd96113d1565b5b600082015167ffffffffffffffff811115611bf857611bf76113d6565b5b611c0484828501611b96565b91505092915050565b6000604082019050611c2260008301856116dd565b8181036020830152611c34818461126a565b90509392505050565b6000611c48826112f4565b9150611c53836112f4565b9250828203905081811115611c6b57611c6a611920565b5b92915050565b600082825260208201905092915050565b7f494e56414c494420464545205241544500000000000000000000000000000000600082015250565b6000611cb8601083611c71565b9150611cc382611c82565b602082019050919050565b60006020820190508181036000830152611ce781611cab565b9050919050565b6000608082019050611d0360008301886116dd565b8181036020830152611d16818688611a48565b9050611d2560408301856117bc565b611d3260608301846116dd565b969550505050505056fea26469706673582212201b8739b57962d30248f5ad35e9001991ef74b1a6abc6484be959c73c1db8e72264736f6c634300081c0033",
  "deployedBytecode": "0x6080604052600436106100c15760003560e01c80637ff36ab51161007f578063978bbdb911610059578063978bbdb91461021f578063c0d786551461024a578063d06ca61f14610273578063f2fde38b146102b0576100c1565b80637ff36ab5146101c1578063853828b6146101dd5780638da5cb5b146101f4576100c1565b8062113e08146100c657806318cbafe5146100f25780631f00ca741461011b57806338ed17391461015857806345596e2e14610181578063715018a6146101aa575b600080fd5b3480156100d257600080fd5b506100db6102d9565b6040516100e9929190611390565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190611498565b61049e565b005b34801561012757600080fd5b50610142600480360381019061013d9190611681565b610723565b60405161014f91906116ec565b60405180910390f35b34801561016457600080fd5b5061017f600480360381019061017a9190611498565b6107fc565b005b34801561018d57600080fd5b506101a860048036038101906101a39190611707565b610a81565b005b3480156101b657600080fd5b506101bf610ae3565b005b6101db60048036038101906101d69190611734565b610af7565b005b3480156101e957600080fd5b506101f2610bcb565b005b34801561020057600080fd5b50610209610d5d565b60405161021691906117cb565b60405180910390f35b34801561022b57600080fd5b50610234610d86565b60405161024191906116ec565b60405180910390f35b34801561025657600080fd5b50610271600480360381019061026c91906117e6565b610d8c565b005b34801561027f57600080fd5b5061029a60048036038101906102959190611681565b610dd8565b6040516102a791906116ec565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d291906117e6565b610ed1565b005b60608060006102e86002610f57565b90508067ffffffffffffffff81111561030457610303611543565b5b6040519080825280602002602001820160405280156103325781602001602082028036833780820191505090505b5092508067ffffffffffffffff81111561034f5761034e611543565b5b60405190808252806020026020018201604052801561037d5781602001602082028036833780820191505090505b50915060005b818110156104985760006103a1826002610f6c90919063ffffffff16565b9050808583815181106103b7576103b6611813565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161042a91906117cb565b602060405180830381865afa158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190611857565b84838151811061047e5761047d611813565b5b602002602001018181525050508080600101915050610383565b50509091565b6104da848460008181106104b5576104b4611813565b5b90506020020160208101906104ca91906117e6565b6002610f8690919063ffffffff16565b50838360008181106104ef576104ee611813565b5b905060200201602081019061050491906117e6565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161054093929190611884565b6020604051808303816000875af115801561055f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058391906118f3565b5060006103e860045488610597919061194f565b6105a191906119c0565b9050848460008181106105b7576105b6611813565b5b90506020020160208101906105cc91906117e6565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016106289291906119f1565b6020604051808303816000875af1158015610647573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066b91906118f3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318cbafe58288888888886040518763ffffffff1660e01b81526004016106d196959493929190611aa5565b6000604051808303816000875af11580156106f0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107199190611bc4565b5050505050505050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7485856040518363ffffffff1660e01b8152600401610783929190611c0d565b600060405180830381865afa1580156107a0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107c99190611bc4565b905080600182516107da9190611c3d565b815181106107eb576107ea611813565b5b602002602001015191505092915050565b6108388484600081811061081357610812611813565b5b905060200201602081019061082891906117e6565b6002610f8690919063ffffffff16565b508383600081811061084d5761084c611813565b5b905060200201602081019061086291906117e6565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161089e93929190611884565b6020604051808303816000875af11580156108bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e191906118f3565b5060006103e8600454886108f5919061194f565b6108ff91906119c0565b90508484600081811061091557610914611813565b5b905060200201602081019061092a91906117e6565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016109869291906119f1565b6020604051808303816000875af11580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906118f3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398288888888886040518763ffffffff1660e01b8152600401610a2f96959493929190611aa5565b6000604051808303816000875af1158015610a4e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a779190611bc4565b5050505050505050565b610a89610fb6565b600081118015610a9a57506103e881105b610ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad090611cce565b60405180910390fd5b8060048190555050565b610aeb610fb6565b610af5600061103d565b565b60006103e860045434610b0a919061194f565b610b1491906119c0565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637ff36ab58288888888886040518763ffffffff1660e01b8152600401610b7a959493929190611cee565b60006040518083038185885af1158015610b98573d6000803e3d6000fd5b50505050506040513d6000823e3d601f19601f82011682018060405250810190610bc29190611bc4565b50505050505050565b610bd3610fb6565b610bdb610d5d565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610c20573d6000803e3d6000fd5b5060005b610c2e6002610f57565b811015610d5a576000610c4b826002610f6c90919063ffffffff16565b90508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb610c71610d5d565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610caa91906117cb565b602060405180830381865afa158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb9190611857565b6040518363ffffffff1660e01b8152600401610d089291906119f1565b6020604051808303816000875af1158015610d27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4b91906118f3565b50508080600101915050610c24565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b610d94610fb6565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806103e860045485610dec919061194f565b610df691906119c0565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f83866040518363ffffffff1660e01b8152600401610e57929190611c0d565b600060405180830381865afa158015610e74573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e9d9190611bc4565b90508060018251610eae9190611c3d565b81518110610ebf57610ebe611813565b5b60200260200101519250505092915050565b610ed9610fb6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f4b5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610f4291906117cb565b60405180910390fd5b610f548161103d565b50565b6000610f6582600001611101565b9050919050565b6000610f7b8360000183611112565b60001c905092915050565b6000610fae836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61113d565b905092915050565b610fbe6111ad565b73ffffffffffffffffffffffffffffffffffffffff16610fdc610d5d565b73ffffffffffffffffffffffffffffffffffffffff161461103b57610fff6111ad565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161103291906117cb565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081600001805490509050919050565b600082600001828154811061112a57611129611813565b5b9060005260206000200154905092915050565b600061114983836111b5565b6111a25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506111a7565b600090505b92915050565b600033905090565b600080836001016000848152602001908152602001600020541415905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061122f82611204565b9050919050565b61123f81611224565b82525050565b60006112518383611236565b60208301905092915050565b6000602082019050919050565b6000611275826111d8565b61127f81856111e3565b935061128a836111f4565b8060005b838110156112bb5781516112a28882611245565b97506112ad8361125d565b92505060018101905061128e565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b611307816112f4565b82525050565b600061131983836112fe565b60208301905092915050565b6000602082019050919050565b600061133d826112c8565b61134781856112d3565b9350611352836112e4565b8060005b8381101561138357815161136a888261130d565b975061137583611325565b925050600181019050611356565b5085935050505092915050565b600060408201905081810360008301526113aa818561126a565b905081810360208301526113be8184611332565b90509392505050565b6000604051905090565b600080fd5b600080fd5b6113e4816112f4565b81146113ef57600080fd5b50565b600081359050611401816113db565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261142c5761142b611407565b5b8235905067ffffffffffffffff8111156114495761144861140c565b5b60208301915083602082028301111561146557611464611411565b5b9250929050565b61147581611224565b811461148057600080fd5b50565b6000813590506114928161146c565b92915050565b60008060008060008060a087890312156114b5576114b46113d1565b5b60006114c389828a016113f2565b96505060206114d489828a016113f2565b955050604087013567ffffffffffffffff8111156114f5576114f46113d6565b5b61150189828a01611416565b9450945050606061151489828a01611483565b925050608061152589828a016113f2565b9150509295509295509295565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61157b82611532565b810181811067ffffffffffffffff8211171561159a57611599611543565b5b80604052505050565b60006115ad6113c7565b90506115b98282611572565b919050565b600067ffffffffffffffff8211156115d9576115d8611543565b5b602082029050602081019050919050565b60006115fd6115f8846115be565b6115a3565b905080838252602082019050602084028301858111156116205761161f611411565b5b835b8181101561164957806116358882611483565b845260208401935050602081019050611622565b5050509392505050565b600082601f83011261166857611667611407565b5b81356116788482602086016115ea565b91505092915050565b60008060408385031215611698576116976113d1565b5b60006116a6858286016113f2565b925050602083013567ffffffffffffffff8111156116c7576116c66113d6565b5b6116d385828601611653565b9150509250929050565b6116e6816112f4565b82525050565b600060208201905061170160008301846116dd565b92915050565b60006020828403121561171d5761171c6113d1565b5b600061172b848285016113f2565b91505092915050565b6000806000806000608086880312156117505761174f6113d1565b5b600061175e888289016113f2565b955050602086013567ffffffffffffffff81111561177f5761177e6113d6565b5b61178b88828901611416565b9450945050604061179e88828901611483565b92505060606117af888289016113f2565b9150509295509295909350565b6117c581611224565b82525050565b60006020820190506117e060008301846117bc565b92915050565b6000602082840312156117fc576117fb6113d1565b5b600061180a84828501611483565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050611851816113db565b92915050565b60006020828403121561186d5761186c6113d1565b5b600061187b84828501611842565b91505092915050565b600060608201905061189960008301866117bc565b6118a660208301856117bc565b6118b360408301846116dd565b949350505050565b60008115159050919050565b6118d0816118bb565b81146118db57600080fd5b50565b6000815190506118ed816118c7565b92915050565b600060208284031215611909576119086113d1565b5b6000611917848285016118de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061195a826112f4565b9150611965836112f4565b9250828202611973816112f4565b9150828204841483151761198a57611989611920565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119cb826112f4565b91506119d6836112f4565b9250826119e6576119e5611991565b5b828204905092915050565b6000604082019050611a0660008301856117bc565b611a1360208301846116dd565b9392505050565b6000819050919050565b6000611a336020840184611483565b905092915050565b6000602082019050919050565b6000611a5483856111e3565b9350611a5f82611a1a565b8060005b85811015611a9857611a758284611a24565b611a7f8882611245565b9750611a8a83611a3b565b925050600181019050611a63565b5085925050509392505050565b600060a082019050611aba60008301896116dd565b611ac760208301886116dd565b8181036040830152611ada818688611a48565b9050611ae960608301856117bc565b611af660808301846116dd565b979650505050505050565b600067ffffffffffffffff821115611b1c57611b1b611543565b5b602082029050602081019050919050565b6000611b40611b3b84611b01565b6115a3565b90508083825260208201905060208402830185811115611b6357611b62611411565b5b835b81811015611b8c5780611b788882611842565b845260208401935050602081019050611b65565b5050509392505050565b600082601f830112611bab57611baa611407565b5b8151611bbb848260208601611b2d565b91505092915050565b600060208284031215611bda57611bd96113d1565b5b600082015167ffffffffffffffff811115611bf857611bf76113d6565b5b611c0484828501611b96565b91505092915050565b6000604082019050611c2260008301856116dd565b8181036020830152611c34818461126a565b90509392505050565b6000611c48826112f4565b9150611c53836112f4565b9250828203905081811115611c6b57611c6a611920565b5b92915050565b600082825260208201905092915050565b7f494e56414c494420464545205241544500000000000000000000000000000000600082015250565b6000611cb8601083611c71565b9150611cc382611c82565b602082019050919050565b60006020820190508181036000830152611ce781611cab565b9050919050565b6000608082019050611d0360008301886116dd565b8181036020830152611d16818688611a48565b9050611d2560408301856117bc565b611d3260608301846116dd565b969550505050505056fea26469706673582212201b8739b57962d30248f5ad35e9001991ef74b1a6abc6484be959c73c1db8e72264736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/SwapIt.sol:SwapIt",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1283,
        "contract": "contracts/SwapIt.sol:SwapIt",
        "label": "router",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IUniswapV2Router02)1268"
      },
      {
        "astId": 1286,
        "contract": "contracts/SwapIt.sol:SwapIt",
        "label": "tokens",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)585_storage"
      },
      {
        "astId": 1289,
        "contract": "contracts/SwapIt.sol:SwapIt",
        "label": "feeRate",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Router02)1268": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)585_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 584,
            "contract": "contracts/SwapIt.sol:SwapIt",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)270_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)270_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 265,
            "contract": "contracts/SwapIt.sol:SwapIt",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 269,
            "contract": "contracts/SwapIt.sol:SwapIt",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}